import streamlit as st
import sqlite3
import json
import os
from streamlit_js_eval import streamlit_js_eval

# ==================== C√ÄI ƒê·∫∂T BAN ƒê·∫¶U ====================
st.set_page_config(page_title="B·∫£n ƒë·ªì c·ª©u tr·ª£", layout="wide")
# --- T·ª± ƒë·ªông cu·ªôn xu·ªëng ph·∫ßn g·ª≠i c·ª©u tr·ª£ n·∫øu c√≥ tham s·ªë ---
params = st.query_params

if params.get("scroll") == ["form"]:
    st.components.v1.html("""
        <script>
        window.addEventListener("load", () => {
            setTimeout(() => {
                const form = document.getElementById("rescue-form");
                if (form) {
                    form.scrollIntoView({behavior: "smooth", block: "center"});
                    form.style.transition = "box-shadow 0.3s ease";
                    form.style.boxShadow = "0 0 20px gold";
                    setTimeout(() => form.style.boxShadow = "none", 1500);
                }
            }, 600);
        });
        </script>
    """, height=0)
DB_PATH = "rescue.db"
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# ==================== KH·ªûI T·∫†O DATABASE ====================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS rescue_requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            phone TEXT,
            note TEXT,
            address TEXT,
            lat REAL,
            lng REAL,
            images TEXT
        )
    """)
    conn.commit()
    conn.close()

# ch·∫°y ngay l·∫≠p t·ª©c ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ b·∫£ng
init_db()

# ==================== H√ÄM L·∫§Y D·ªÆ LI·ªÜU ====================
def get_all_requests():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT name, phone, note, address, lat, lng, images FROM rescue_requests")
    rows = c.fetchall()
    conn.close()
    return [
        {
            "name": r[0],
            "phone": r[1],
            "note": r[2],
            "address": r[3],
            "lat": r[4],
            "lng": r[5],
            "images": json.loads(r[6]) if r[6] else []
        }
        for r in rows
    ]

# ==================== HI·ªÇN TH·ªä B·∫¢N ƒê·ªí ====================
st.subheader("üó∫Ô∏è B·∫£n ƒë·ªì c·ª©u tr·ª£")

data = get_all_requests()
center_lat = data[0]["lat"] if data else 10.762622
center_lng = data[0]["lng"] if data else 106.660172
api_key = "AIzaSyD4KVbyvfBHFpN_ZNn7RrmZG5Qw9C_VbgU"  # üîë thay b·∫±ng API key th·∫≠t

html_template = f"""
<!DOCTYPE html>
<html>
  <head>
    <style>
      #map {{ height: 600px; width: 100%; border-radius: 10px; }}
      img.marker-img {{ width: 180px; border-radius: 8px; margin-top: 5px; }}
      button.map-btn {{
        display: block; margin-top: 5px; padding: 6px 10px;
        background: #007bff; color: white; border: none;
        border-radius: 5px; cursor: pointer;
      }}
      button.map-btn:hover {{ background: #0056b3; }}
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script>
      function initMap() {{
        const center = {{ lat: {center_lat}, lng: {center_lng} }};
        const map = new google.maps.Map(document.getElementById("map"), {{
          zoom: 13,
          center: center,
        }});

        const locations = {json.dumps(data)};

        locations.forEach(loc => {{
          const marker = new google.maps.Marker({{
            position: {{ lat: loc.lat, lng: loc.lng }},
            map: map,
            icon: {{
              url: "https://maps.google.com/mapfiles/ms/icons/red-dot.png",
              scaledSize: new google.maps.Size(40, 40)
            }}
          }});

          const firstImg = loc.images && loc.images.length
              ? `<img src="uploads/${{loc.images[0]}}" class='marker-img'><br>` : "";
          const info = new google.maps.InfoWindow({{
              content: `
                <b>${{loc.name}}</b><br>
                üè† ${{loc.address || ""}}<br>
                ${{firstImg}}
                ${{loc.note || ""}}<br>
                <button class="map-btn" onclick="window.open('tel:${{loc.phone}}')">üìû G·ªçi ngay</button>
                <button class="map-btn" onclick="window.open('https://www.google.com/maps/dir/?api=1&destination=${{loc.lat}},${{loc.lng}}')">üß≠ ƒêi ƒë·∫øn c·ª©u h·ªô</button>
                ${{loc.images && loc.images.length > 1 ? `<button class='map-btn' onclick='showImages("uploads", ${{JSON.stringify(loc.images)}})'>üì∑ Xem th√™m ·∫£nh</button>` : ""}}
              `
          }});
          marker.addListener("click", () => info.open(map, marker));
        }});
      }}

      function showImages(basePath, images) {{
        let html = images.map(img => `<img src='${{basePath}}/${{img}}' style='width:100%;border-radius:10px;margin-bottom:5px;'>`).join('');
        const w = window.open('', '_blank', 'width=400,height=600,scrollbars=yes');
        w.document.write(`<title>·∫¢nh c·ª©u tr·ª£</title><body style='margin:10px;font-family:sans-serif;'>${{html}}</body>`);
      }}
    </script>
    <script async src="https://maps.googleapis.com/maps/api/js?key={api_key}&callback=initMap"></script>
  </body>
</html>
"""

st.components.v1.html(html_template, height=600)

# ==================== FORM G·ª¨I Y√äU C·∫¶U ====================
st.markdown('<div id="rescue-form"></div>', unsafe_allow_html=True)
st.markdown("### üÜò G·ª≠i y√™u c·∫ßu c·ª©u tr·ª£")

with st.form("rescue_form"):
    name = st.text_input("üë§ H·ªç v√† t√™n:")
    phone = st.text_input("üìû S·ªë ƒëi·ªán tho·∫°i:")
    address = st.text_input("üè† ƒê·ªãa ch·ªâ (ho·∫∑c m√¥ t·∫£ v·ªã tr√≠):")
    note = st.text_area("üìù T√¨nh tr·∫°ng c·∫ßn c·ª©u tr·ª£:")

    # --- N√∫t l·∫•y t·ªça ƒë·ªô t·ª± ƒë·ªông ---
    get_loc = st.form_submit_button("üìç L·∫•y t·ªça ƒë·ªô v·ªã tr√≠ hi·ªán t·∫°i")

    if get_loc:
        js = """
        new Promise((resolve) => {
            navigator.geolocation.getCurrentPosition(
                pos => resolve(JSON.stringify({
                    lat: pos.coords.latitude,
                    lng: pos.coords.longitude
                })),
                err => resolve("ERROR:" + err.message)
            );
        });
        """
        coords = streamlit_js_eval(js_expressions=js, key="get_coords")
        if coords and not str(coords).startswith("ERROR"):
            try:
                d = json.loads(coords)
                st.session_state["lat"] = d["lat"]
                st.session_state["lng"] = d["lng"]
                st.success(f"‚úÖ L·∫•y v·ªã tr√≠ th√†nh c√¥ng: ({d['lat']:.6f}, {d['lng']:.6f})")
            except:
                st.warning("‚ö†Ô∏è L·ªói khi ƒë·ªçc d·ªØ li·ªáu v·ªã tr√≠.")
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠ (H√£y th·ª≠ b·∫•m li√™n t·ª•c th·∫≠t nhanh).")

    images = st.file_uploader("üì∏ ·∫¢nh minh ch·ª©ng (t·ªëi ƒëa 3 ·∫£nh):", accept_multiple_files=True)
    submitted = st.form_submit_button("‚úÖ G·ª≠i y√™u c·∫ßu c·ª©u tr·ª£")

    if submitted:
        lat = st.session_state.get("lat", None)
        lng = st.session_state.get("lng", None)

        if not all([name.strip(), phone.strip(), address.strip()]) or lat is None or lng is None:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin v√† l·∫•y t·ªça ƒë·ªô tr∆∞·ªõc khi g·ª≠i!")
        else:
            img_paths = []
            for img in images[:3]:
                path = os.path.join(UPLOAD_DIR, img.name)
                with open(path, "wb") as f:
                    f.write(img.getbuffer())
                img_paths.append(img.name)

            conn = sqlite3.connect(DB_PATH)
            c = conn.cursor()
            c.execute("""
                INSERT INTO rescue_requests (name, phone, note, address, lat, lng, images)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (name, phone, note, address, lat, lng, json.dumps(img_paths)))
            conn.commit()
            conn.close()

            st.success("‚úÖ G·ª≠i y√™u c·∫ßu c·ª©u tr·ª£ th√†nh c√¥ng! B·∫£n ƒë·ªì s·∫Ω c·∫≠p nh·∫≠t sau v√†i gi√¢y.")
            st.session_state.pop("lat", None)
            st.session_state.pop("lng", None)
            st.rerun()
